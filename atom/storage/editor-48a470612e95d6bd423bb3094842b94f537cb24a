{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":1920,"height":1080,"maximized":true},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/Kamilius/proj/react-tutorial"],"buffers":[{"text":"var CommentBox = React.createClass({\n  getInitialState: function() {\n    return {data: []}\n  },\n  loadCommentsFromServer: function() {\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      cache: false,\n      success: function(data) {\n        this.setState({data: data})\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString())\n      }.bind(this)\n    })\n  },\n  handleCommentSubmit: function(comment) {\n    var comments = this.state.data,\n      newComments = comments.concat([comment])\n    this.setState({data: newComments})\n\n    $.ajax({\n      url: this.props.url,\n      dataType: 'json',\n      type: 'POST',\n      data: comment,\n      success: function(data) {\n        this.setState({data: data})\n      }.bind(this),\n      error: function(xhr, status, err) {\n        console.error(this.props.url, status, err.toString())\n      }.bind(this)\n    })\n  },\n  componentDidMount: function() {\n    this.loadCommentsFromServer()\n    setInterval(this.loadCommentsFromServer, this.props.pollInterval)\n  },\n  render: function() {\n    return (\n      <div className=\"comment-box\">\n        <h1>Comments</h1>\n        <CommentList data={this.state.data} />\n        <CommentForm onCommentSubmit={this.handleCommentSubmit} />\n      </div>\n    )\n  }\n})\n\nvar CommentList = React.createClass({\n  render: function() {\n    var commentNodes = this.props.data.map(function(comment) {\n      return (\n        <Comment author={comment.author}>\n          {comment.text}\n        </Comment>\n      )\n    })\n    return (\n      <div className=\"comment-list\">\n        {commentNodes}\n      </div>\n    )\n  }\n})\n\nvar CommentForm = React.createClass({\n  handleSubmit: function(e) {\n    e.preventDefault()\n    var author = React.findDOMNode(this.refs.author).value.trim()\n    var text = React.findDomNode(this.refs.text).value.trim()\n    if (!text || !author) {\n      return\n    }\n\n    this.props.onCommentSubmit({author: author, text: text})\n    React.findDOMNode(this.refs.author).value = ''\n    React.findDOMNode(this.refs.text).value = ''\n\n    return\n  },\n  render: function() {\n    return (\n      <form className=\"comment-form\" onSubmit={this.handleSubmit}>\n        <input type=\"text\" placeholder=\"Your name\" ref=\"author\"/>\n        <input type=\"text\" placeholder=\"Say something...\" ref=\"text\"/>\n        <input type=\"submit\" value=\"Post\" />\n      </form>\n    )\n  }\n})\n\nvar Comment = React.createClass({\n  render: function() {\n    var rawMarkup = marked(this.props.children.toString(), {sanitize: true})\n    return (\n      <div className=\"comment\">\n        <h2 className=\"comment-author\">\n          {this.props.author}\n        </h2>\n        <span dangerouslySetInnerHTML={{__html: rawMarkup}} />\n      </div>\n    )\n  }\n})\n\nReact.render(\n  <CommentBox url=\"comments.json\" pollInterval={2000} />,\n  document.getElementById('content')\n)\n","markerStore":{"nextMarkerId":10,"markersById":{"0":{"range":{"start":{"row":90,"column":3},"end":{"row":90,"column":3}},"properties":{"type":"selection","editorId":12,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true},"2":{"range":{"start":{"row":41,"column":6},"end":{"row":41,"column":35}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false},"3":{"range":{"start":{"row":42,"column":21},"end":{"row":42,"column":22}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"inside","maintainHistory":false},"8":{"range":{"start":{"row":90,"column":2},"end":{"row":90,"column":3}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false},"9":{"range":{"start":{"row":82,"column":21},"end":{"row":82,"column":22}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap","maintainHistory":false}},"version":2},"history":{"version":2,"nextCheckpointId":16,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/Kamilius/proj/react-tutorial/public/scripts/comment.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f2c6c396ac0839827b082a21a00c9daa6f4a376c","deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":12,"softTabs":true,"displayBuffer":{"id":13,"softWrapped":false,"scrollTop":958,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/Kamilius/proj/react-tutorial/public/scripts/comment.js","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"deserializer":"SettingsView","version":2,"activePanelName":"linter-scss-lint","uri":"atom://config/packages"}],"activeItemURI":"atom://config/packages","focused":true,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":true,"packagesWithActiveGrammars":["language-javascript","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"linter":{"scope":"File"},"find-and-replace":{"viewState":"","modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false,"wholeWord":false},"projectViewState":"","resultsModelState":{"useRegex":false,"caseSensitive":false,"wholeWord":false},"findHistory":[],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/Kamilius/proj/react-tutorial/public/scripts/comment.js":1438673301145},"keybinding-resolver":{},"metrics":{"sessionLength":6663266},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/Kamilius/proj/react-tutorial":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"node_modules":{"isExpanded":false,"entries":{}},"public":{"isExpanded":true,"entries":{"css":{"isExpanded":false,"entries":{}},"scripts":{"isExpanded":true,"entries":{}}}}}}},"hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}